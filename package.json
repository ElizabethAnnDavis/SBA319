{
  "name": "sba319",
  "version": "1.0.0",
  "description": "* SBA 319: MongoDB Database Application âœ”\r  * \r  * Objectives:\r  * - Create a server application with Node, Express, and MongoDB.\r  * - Create a CRUD API using Express and MongoDB.\r  * - Create MongoDB indexes.\r  * - Use MongoDB indexing to make efficient queries.\r  * - Create MongoDB validation rules.\r  * - Use MongoDB validation to ensure data consistency.\r  * \r  * \r  * Instructions:\r  * You will create a small Node, Express, and MongoDB server application. \r  * The topic and content of this application is entirely up to you; be creative!\r  * \r  * Your work will be graded according to the technical requirements listed in the following section. \r  * Creativity and effort always work in your favor, so feel free to go beyond the scope of the listed requirements if you have the time.\r  * \r  * Keep things simple. Like most projects you will encounter, you should finish the absolute minimum requirements first, \r  * and then add additional features and complexity if you have the time to do so. This will also help you understand what \r  * you can get done in a specific allotment of time if you were to be asked to do something similar in the future.\r  * \r  * Once you have an idea in mind, briefly discuss it with your instructors to determine if it is appropriate for \r  * the amount of time you have been given.\r  * \r  * Since topic and content are secondary to functionality for this assessment, we have included some resources below for \r  * free content that you can use to populate your application. Once you have gotten your functionality in place, \r  * you can return and fill in the content with something interesting.\r  * \r  * \r  * Requirements:\r  *   -  5%  --> Use at least three different data collections within the database (such as users, posts, or comments).\r  * \r  *   - 10%  --> Utilize reasonable data modeling practices.\r  * \r  *   - 10%  --> Create GET routes for all data that should be exposed to the client, using appropriate query commands \r  *              to retrieve the data from the database.\r  * \r  *   - 10%  --> Create POST routes for data, as appropriate, using appropriate insertion commands to add data to the database. \r  *              At least one data collection should allow for client creation via a POST request.\r  * \r  *   - 10%  --> Create PATCH or PUT routes for data, as appropriate, using appropriate update commands to change data in the database. \r  *              At least one data collection should allow for client manipulation via a PATCH or PUT request.\r  * \r  *   - 10%  --> Create DELETE routes for data, as appropriate, using appropriate delete commands to remove data from the database. \r  *              At least one data collection should allow for client deletion via a DELETE request.\r  * \r  *   -  5%  --> Include sensible indexes for any and all fields that are queried frequently. \r  *              For fields that may have a high write-to-read ratio, you may forgo indexes for performance considerations. \r  *              Make comments of this where applicable.\r  * \r  *   -  5%  --> Include sensible MongoDB data validation rules for at least one data collection.\r  *              Note: this may be accomplished in a number of ways. If you choose to perform this task outside of your application's code, \r  *                    you must include a way to test the validation within the application's routes. This can be as simple as providing \r  *                    a POST route that attempts to create an invalid document and displays the resulting error.\r  * \r  *   -  5%  --> Populate your application's collections with sample data illustrating the use case of the collections. \r  *              You must include at least five sample documents per collection.\r  *              Note: Double-check this requirement before submission. Testing your delete routes may leave you under the requirement. \r  *                    To be safe, populate your collections with sample data well above the requirement (we recommend 10-20 documents).\r  * \r  *   -  5%  --> Utilize reasonable code organization practices.\r  * \r  *   - 10%  --> Ensure that the program runs without errors (comment out things that do not work, and explain your blockers \r  *              - you can still receive partial credit).\r  * \r  *   -  5%  --> Commit frequently to the git repository.\r  * \r  *   -  5%  --> Include a README file that contains a description of your application.\r  *              This README must include a description of your API's available routes and their corresponding CRUD operations for reference.\r  * \r  *   -  5%  --> Level of effort displayed in creativity and user experience.\r  * \r  * \r  * Bonus Objectives:\r  *   - +1%  --> Use Mongoose to implement your application.\r  *              Note: The validation requirements above must still be implemented database-side, \r  *                    but should also be implemented application-side within your Mongoose schema(s).\r  * \r  * \r  * Reflection (NOT Optional):\r  * - What could you have done differently during the planning stages of your project to make the execution easier?\r  * - Were there any requirements that were difficult to implement? What do you think would make them easier to implement in future projects?\r  * - What would you add to or change about your application if given more time?\r  * - Use this space to make notes for your future self about anything that you think is important to remember about this process, \r  *   or that may aid you when attempting something similar again:\r  *",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dotenv": "^16.4.7",
    "ejs": "^3.1.10",
    "express": "^4.21.2",
    "mongoose": "^8.9.6"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
